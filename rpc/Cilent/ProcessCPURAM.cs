/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;

namespace test.rpc;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class ProcessCPURAM : TBase
{
  private double _cpuPercentage;
  private double _ramPercentage;

  public double CpuPercentage
  {
    get
    {
      return _cpuPercentage;
    }
    set
    {
      __isset.cpuPercentage = true;
      this._cpuPercentage = value;
    }
  }

  public double RamPercentage
  {
    get
    {
      return _ramPercentage;
    }
    set
    {
      __isset.ramPercentage = true;
      this._ramPercentage = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool cpuPercentage;
    public bool ramPercentage;
  }

  public ProcessCPURAM()
  {
  }

  public ProcessCPURAM DeepCopy()
  {
    var tmp0 = new ProcessCPURAM();
    if(__isset.cpuPercentage)
    {
      tmp0.CpuPercentage = this.CpuPercentage;
    }
    tmp0.__isset.cpuPercentage = this.__isset.cpuPercentage;
    if(__isset.ramPercentage)
    {
      tmp0.RamPercentage = this.RamPercentage;
    }
    tmp0.__isset.ramPercentage = this.__isset.ramPercentage;
    return tmp0;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Double)
            {
              CpuPercentage = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Double)
            {
              RamPercentage = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp1 = new TStruct("ProcessCPURAM");
      await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
      var tmp2 = new TField();
      if(__isset.cpuPercentage)
      {
        tmp2.Name = "cpuPercentage";
        tmp2.Type = TType.Double;
        tmp2.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
        await oprot.WriteDoubleAsync(CpuPercentage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.ramPercentage)
      {
        tmp2.Name = "ramPercentage";
        tmp2.Type = TType.Double;
        tmp2.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
        await oprot.WriteDoubleAsync(RamPercentage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is ProcessCPURAM other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.cpuPercentage == other.__isset.cpuPercentage) && ((!__isset.cpuPercentage) || (global::System.Object.Equals(CpuPercentage, other.CpuPercentage))))
      && ((__isset.ramPercentage == other.__isset.ramPercentage) && ((!__isset.ramPercentage) || (global::System.Object.Equals(RamPercentage, other.RamPercentage))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.cpuPercentage)
      {
        hashcode = (hashcode * 397) + CpuPercentage.GetHashCode();
      }
      if(__isset.ramPercentage)
      {
        hashcode = (hashcode * 397) + RamPercentage.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp3 = new StringBuilder("ProcessCPURAM(");
    int tmp4 = 0;
    if(__isset.cpuPercentage)
    {
      if(0 < tmp4++) { tmp3.Append(", "); }
      tmp3.Append("CpuPercentage: ");
      CpuPercentage.ToString(tmp3);
    }
    if(__isset.ramPercentage)
    {
      if(0 < tmp4++) { tmp3.Append(", "); }
      tmp3.Append("RamPercentage: ");
      RamPercentage.ToString(tmp3);
    }
    tmp3.Append(')');
    return tmp3.ToString();
  }
}

